## fit and generate correlated timeseries
sim <- generateMTSFast(n = 500,
spacepoints = coord,
p0 = 0.7,
margdist ="burrXII",
margarg = list(scale = 3, shape1 = .9, shape2 = .2),
stcsarg = list(scfid = "weibull", tcfid = "weibull",
scfarg = list(scale = 25, shape = 0.7),
tcfarg = list(scale = 3.1, shape = 0.8)) )
## visualize simulated timeseries
dta <- melt(data = data.table(time = 1:nrow(sim), sim[,1:d]), id.vars = "time")
ggplot(data = dta, mapping = aes(x = time, y = value)) + geom_line() +
facet_grid(facets = variable ~ ., scales = "free_y")
## set a sequence of hypothetical coordinates
d <- 5
coord <- cbind(runif(d)*30, runif(d)*30)
## fit and generate correlated timeseries
sim <- generateMTSFast(n = 500,
spacepoints = coord,
p0 = 0.7,
margdist ='paretoII',
margarg = list(scale = 1, shape = .3),
stcsarg = list(scfid = "weibull", tcfid = "weibull",
scfarg = list(scale = 20, shape = 0.7),
tcfarg = list(scale = 1.1, shape = 0.8)) )
## visualize simulated timeseries
dta <- melt(data = data.table(time = 1:nrow(sim), sim[,1:d]), id.vars = "time")
ggplot(data = dta, mapping = aes(x = time, y = value)) + geom_line() +
facet_grid(facets = variable ~ ., scales = "free_y")
## set a sequence of hypothetical coordinates
d <- 5
coord <- cbind(runif(d)*30, runif(d)*30)
## compute VAR model parameters
fit <- fitVAR(spacepoints = coord,
p = 5,
margdist ="burrXII",
margarg = list(scale = 3, shape1 = .9, shape2 = .2),
p0 = 0.8,
stcsid = "clayton",
stcsarg = list(scfid = "weibull", tcfid = "weibull", copulaarg = 2,
scfarg = list(scale = 25, shape = 0.7),
tcfarg = list(scale = 3.1, shape = 0.8) ) )
## generate correlated timeseries
sim <- generateMTS(n = 500, STmodel = fit)
## visualize simulated timeseries
dta <- melt(data = data.table(time = 1:nrow(sim), sim[,1:d]), id.vars = "time")
ggplot(data = dta, mapping = aes(x = time, y = value)) + geom_line() +
facet_grid(facets = variable ~ ., scales = "free_y")
## compute VAR model parameters
## CPU time: ~15s
fit <- fitVAR(spacepoints = 20, p = 3, margdist ="burrXII",
margarg = list(scale = 3, shape1 = .9, shape2 = .2), p0 = 0.8, stcsid = "clayton",
stcsarg = list(scfid = "weibull", tcfid = "weibull", copulaarg = 2,
scfarg = list(scale = 20, shape = 0.7), tcfarg = list(scale = 1.1, shape = 0.8) ) )
## generate random fields with nonseparable correlation structure
sim1 <- generateRF(n = 1000, STmodel = fit)
## fast simulation of anisotropic random fields with separable correlation structure
sim2 <- generateRFFast(n = 1000, spacepoints = 20, p0 = 0.7, margdist ="paretoII",
margarg = list(scale = 1, shape = .3),
stcsarg = list(scfid = "weibull", tcfid = "weibull",
scfarg = list(scale = 20, shape = 0.7),
tcfarg = list(scale = 1.1, shape = 0.8)),
anisotropyarg = list(phi1 = 0.5, phi2 = 2, theta = -pi/3))
install.packages("tictoc")
library(tictoc)
## compute VAR model parameters
## CPU time: ~15s
fit <- fitVAR(spacepoints = 20, p = 3, margdist ="burrXII",
margarg = list(scale = 3, shape1 = .9, shape2 = .2), p0 = 0.8, stcsid = "clayton",
stcsarg = list(scfid = "weibull", tcfid = "weibull", copulaarg = 2,
scfarg = list(scale = 20, shape = 0.7), tcfarg = list(scale = 1.1, shape = 0.8) ) )
## generate random fields with nonseparable correlation structure
tic()
sim1 <- generateRF(n = 1000, STmodel = fit)
toc()
## fast simulation of anisotropic random fields with separable correlation structure
tic()
sim2 <- generateRFFast(n = 1000, spacepoints = 20, p0 = 0.7, margdist ="paretoII",
margarg = list(scale = 1, shape = .3),
stcsarg = list(scfid = "weibull", tcfid = "weibull",
scfarg = list(scale = 20, shape = 0.7),
tcfarg = list(scale = 1.1, shape = 0.8)),
anisotropyarg = list(phi1 = 0.5, phi2 = 2, theta = -pi/3))
toc()
0.481/ 0.58
9.481/ 0.58
checkRF(RF = sim1, nfields = 9*9)
checkRF(RF = sim1, nfields = 9*9, method = 'stat')
checkRF(RF = sim1, nfields = 9*9, method = "stat")
checkRF(RF = sim1, nfields = 3*3, method = "stat")
checkRF(RF = sim1, nfields = 9*9, method = "movie")
## check random fields
## CPU time: ~20s
tic()
checkRF(RF = sim1, nfields = 9*9, method = "stat")
checkRF(RF = sim1, nfields = 9*9, method = "statplot")
checkRF(RF = sim1, nfields = 9*9, method = "field")
toc()
## check random fields
## CPU time: ~20s
checkRF(RF = sim1, nfields = 9*9, method = "stat")
checkRF(RF = sim1, nfields = 9*9, method = "statplot")
checkRF(RF = sim1, nfields = 9*9, method = "field")
## check random fields
checkRF(RF = sim2, nfields = 9*9, method = "field")
## Uncomment to save fields as a GIF file named 'movieRF.gif' in the working directory
## checkRF(RF = sim2, nfields = 9*9, method = "movie")
## compute VAR model parameters
## CPU time: ~15s
fit <- fitVAR(spacepoints = 20, p = 3, margdist ="burrXII",
margarg = list(scale = 3, shape1 = .9, shape2 = .2), p0 = 0.8, stcsid = "clayton",
stcsarg = list(scfid = "weibull", tcfid = "weibull", copulaarg = 2,
scfarg = list(scale = 20, shape = 0.7), tcfarg = list(scale = 1.1, shape = 0.8) ) )
## generate random fields with nonseparable correlation structure
sim1 <- generateRF(n = 1000, STmodel = fit)
## fast simulation of anisotropic random fields with separable correlation structure
sim2 <- generateRFFast(n = 1000, spacepoints = 20, p0 = 0.7, margdist ="paretoII",
margarg = list(scale = 1, shape = .3),
stcsarg = list(scfid = "weibull", tcfid = "weibull",
scfarg = list(scale = 20, shape = 0.7),
tcfarg = list(scale = 1.1, shape = 0.8)),
anisotropyarg = list(phi1 = 0.5, phi2 = 2, theta = -pi/3))
## (i) specifying the sample size
no <- 1000
## (ii) defining the type of marginal distribution and its parameters
marginaldist <- "ggamma"
param <- list(scale = 1, shape1 = .8, shape2 = .8)
## (iii) defining the desired autocorrelation
acf.my <- c(1, 0.8)
## (iv) simulating
ggamma_sim <- generateTS(n = no, margdist = marginaldist, margarg = param, acsvalue = acf.my)
## and (v) visually checking the generated time series
quickTSPlot(ggamma_sim[[1]]) + theme_light()
## (i) specifying the sample size
no <- 1000
## (ii) defining the type of marginal distribution and its parameters
marginaldist <- "ggamma"
param <- list(scale = 1, shape1 = .8, shape2 = .8)
## (iii) defining the desired autocorrelation
acf.my <- c(1, 0.8)
## (iv) simulating
ggamma_sim <- generateTS(n = no, margdist = marginaldist, margarg = param, acsvalue = acf.my)
## and (v) visually checking the generated time series
p <- quickTSPlot(ggamma_sim[[1]]) + theme_light()
p
## (i) specifying the sample size
no <- 1000
## (ii) defining the type of marginal distribution and its parameters
marginaldist <- "ggamma"
param <- list(scale = 1, shape1 = .8, shape2 = .8)
## (iii) defining the desired autocorrelation
acf.my <- c(1, 0.8)
## (iv) simulating
ggamma_sim <- generateTS(n = no, margdist = marginaldist, margarg = param, acsvalue = acf.my)
## and (v) visually checking the generated time series
p <- quickTSPlot(ggamma_sim[[1]])
p <- p + theme_light()
p
p <- quickTSPlot(ggamma_sim[[1]])
p
p2 <- p + theme_light()
p2
## specify lag
lags <- 0:10
## get the ACS
f <- acs(id = "fgn", t = lags, H = .75)
b <- acs(id = "burrXII", t = lags, scale = 1, shape1 = .6, shape2 = .4)
w <- acs(id = "weibull", t = lags, scale = 2, shape = 0.8)
p <- acs(id = "paretoII", t = lags, scale = 3, shape = 0.3)
## visualize the ACS
dta <- data.table(lags, f, b, w, p)
m.dta <- melt(data = dta, id.vars = "lags")
ggplot(data = m.dta, mapping = aes(x = lags, y = value, group = variable, colour = variable)) +
geom_point(size = 2.5) + geom_line(lwd = 1) +
scale_color_manual(values = c("steelblue4", "red4", "green4", "darkorange"),
labels = c("FGN", "Burr XII", "Weibull", "Pareto II"), name = "") +
labs(x = bquote(lag ~ tau), y = "Acf") + scale_x_continuous(breaks = lags) + theme_light()
## specify lag
lags <- 0:10
## get the ACS
f <- acs(id = "fgn", t = lags, H = .75)
b <- acs(id = "burrXII", t = lags, scale = 1, shape1 = .6, shape2 = .4)
w <- acs(id = "weibull", t = lags, scale = 2, shape = 0.8)
p <- acs(id = "paretoII", t = lags, scale = 3, shape = 0.3)
## visualize the ACS
dta <- data.table(lags, f, b, w, p)
m.dta <- melt(data = dta, id.vars = "lags")
ggplot(data = m.dta, mapping = aes(x = lags, y = value, group = variable, colour = variable)) +
geom_point(size = 2.5) + geom_line(lwd = 1) +
scale_color_manual(values = c("steelblue4", "red4", "green4", "darkorange"),
labels = c("FGN", "Burr XII", "Weibull", "Pareto II"), name = "") +
labs(x = bquote(lag ~ tau), y = "Acf") + scale_x_continuous(breaks = lags) + theme_light()
## set a sequence of hypothetical coordinates
d <- 5
coord <- cbind(runif(d)*30, runif(d)*30)
## compute VAR model parameters
fit <- fitVAR(spacepoints = coord,
p = 5,
margdist ="burrXII",
margarg = list(scale = 3, shape1 = .9, shape2 = .2),
p0 = 0.8,
stcsid = "clayton",
stcsarg = list(scfid = "weibull", tcfid = "weibull", copulaarg = 2,
scfarg = list(scale = 25, shape = 0.7),
tcfarg = list(scale = 3.1, shape = 0.8) ) )
## generate correlated timeseries
sim <- generateMTS(n = 500, STmodel = fit)
## visualize simulated timeseries
dta <- melt(data = data.table(time = 1:nrow(sim), sim[,1:d]), id.vars = "time")
ggplot(data = dta, mapping = aes(x = time, y = value)) + geom_line() +
facet_grid(facets = variable ~ ., scales = "free_y") + theme_light()
## set a sequence of hypothetical coordinates
d <- 5
coord <- cbind(runif(d)*30, runif(d)*30)
## fit and generate correlated timeseries
sim <- generateMTSFast(n = 500,
spacepoints = coord,
p0 = 0.7,
margdist ="burrXII",
margarg = list(scale = 3, shape1 = .9, shape2 = .2),
stcsarg = list(scfid = "weibull", tcfid = "weibull",
scfarg = list(scale = 25, shape = 0.7),
tcfarg = list(scale = 3.1, shape = 0.8)) )
## visualize simulated timeseries
dta <- melt(data = data.table(time = 1:nrow(sim), sim[,1:d]), id.vars = "time")
ggplot(data = dta, mapping = aes(x = time, y = value)) + geom_line() +
facet_grid(facets = variable ~ ., scales = "free_y") + theme_light()
## CPU time: ~75s
precip_ggamma <- analyzeTS(TS = precip, season = "month", dist = "ggamma",
acsID = "weibull", lag.max = 12)
reportTS(aTS = precip_ggamma, method = "dist")
reportTS(aTS = precip_ggamma, method = "acs") + theme_light()
reportTS(aTS = precip_ggamma, method = "stat")
precip_pareto <- analyzeTS(TS = precip, season = "month", dist = "paretoII", acsID = "fgn", lag.max = 12)
reportTS(aTS = precip_pareto, method = "dist")
reportTS(aTS = precip_pareto, method = "acs") + theme_light()
sim_precip <- simulateTS(aTS = precip_ggamma, from = as.POSIXct(x = "1978-12-01 00:00:00"),
to = as.POSIXct(x = "2008-12-01 00:00:00"))
dta <- precip
dta[, id := "observed"]
sim_precip[, id := "simulated"]
dta <- rbind(dta, sim_precip)
ggplot(data = dta) + geom_line(mapping = aes(x = date, y = value)) + facet_wrap(facets = ~id, ncol = 1) + theme_light()
## CPU time: ~240s
data("disch")
str <- analyzeTS(TS = disch, dist = "lnorm", norm = "N2", acsID = "paretoII",
lag.max = 20, constrain = TRUE, season = "month")
reportTS(aTS = str) + theme_light()
reportTS(aTS = str, method = "stat")
sim_str <- simulateTS(aTS = str)
dta <- disch
dta[, id := "observed"]
sim_str[, id := "simulated"]
dta <- rbind(dta, sim_str)
ggplot(data = dta) + geom_line(mapping = aes(x = date, y = value)) + facet_wrap(facets = ~id, ncol = 1) + theme_light()
## (i) specifying the sample size
no <- 1000
## (ii) defining the type of marginal distribution and its parameters
marginaldist <- "ggamma"
param <- list(scale = 1, shape1 = .8, shape2 = .8)
## (iii) defining the desired autocorrelation
acf.my <- c(1, 0.8)
## (iv) simulating
ggamma_sim <- generateTS(n = no, margdist = marginaldist, margarg = param, acsvalue = acf.my)
## and (v) visually checking the generated time series
quickTSPlot(ggamma_sim[[1]]) + theme_light()
prob_zero <- .9
## the argument `TSn = 5` enables the simulation of 5 timeseries.
ggamma_sim <- generateTS(n = no, margdist = marginaldist, margarg = param, acsvalue = acf,
p0 = prob_zero, TSn = 5)
plot(x = ggamma_sim, main = "") + theme_light()
## (i) specifying the sample size
no <- 1000
## (ii) defining the type of marginal distribution and its parameters
marginaldist <- "ggamma"
param <- list(scale = 1, shape1 = .8, shape2 = .8)
## (iii) defining the desired autocorrelation
acf.my <- c(1, 0.8)
## (iv) simulating
ggamma_sim <- generateTS(n = no, margdist = marginaldist, margarg = param, acsvalue = acf.my)
## and (v) visually checking the generated time series
p <- quickTSPlot(ggamma_sim[[1]])
View(p)
p$theme
p2 <- p
p2$theme <- theme_light()
p2
reportTS(precip_ggamma)
## CPU time: ~75s
precip_ggamma <- analyzeTS(TS = precip, season = "month", dist = "ggamma",
acsID = "weibull", lag.max = 12)
reportTS(aTS = precip_ggamma, method = "dist") + theme_light()
reportTS(aTS = precip_ggamma, method = "acs") + theme_light()
reportTS(aTS = precip_ggamma, method = "stat")
reportTS(aTS = precip_ggamma, method = "dist") + theme_light()
reportTS(aTS = precip_ggamma, method = "acs") + theme_light()
## CPU time: ~75s
precip_ggamma <- analyzeTS(TS = precip, season = "month", dist = "ggamma",
acsID = "weibull", lag.max = 12)
reportTS(aTS = precip_ggamma, method = "dist") + theme_light()
reportTS(aTS = precip_ggamma, method = "acs") + theme_light()
reportTS(aTS = precip_ggamma, method = "stat")
reportTS(aTS = precip_ggamma, method = "dist") + theme_light()
reportTS(aTS = precip_ggamma, method = "acs") + theme_light()
reportTS(aTS = precip_ggamma, method = "stat")
reportTS(aTS = precip_pareto, method = "dist")+ theme_light()
reportTS(aTS = precip_pareto, method = "acs") + theme_light()
View(precip_ggamma)
View(precip_ggamma)
## CPU time: ~240s
data("disch")
str <- analyzeTS(TS = disch, dist = "lnorm", norm = "N2", acsID = "paretoII",
lag.max = 20, constrain = TRUE, season = "month")
reportTS(aTS = str) + theme_light()
reportTS(aTS = str, method = "stat")
sim_str <- simulateTS(aTS = str)
dta <- disch
dta[, id := "observed"]
sim_str[, id := "simulated"]
dta <- rbind(dta, sim_str)
ggplot(data = dta) + geom_line(mapping = aes(x = date, y = value)) + facet_wrap(facets = ~id, ncol = 1) + theme_light()
library(CoSMoS)
devtools::build_vignettes()
R CMD build
install.packages("~/data/projects/CoSMoS_2.0.0.tar.gz", repos = NULL, type = "source")
knitr::opts_chunk$set(eval = FALSE,
echo = TRUE,
fig.width = 7,
warning = FALSE,
message = FALSE)
## (i) specifying the sample size
no <- 1000
## (ii) defining the type of marginal distribution and its parameters
marginaldist <- "ggamma"
param <- list(scale = 1, shape1 = .8, shape2 = .8)
## (iii) defining the desired autocorrelation
acf.my <- c(1, 0.8)
## (iv) simulating
ggamma_sim <- generateTS(n = no, margdist = marginaldist, margarg = param, acsvalue = acf.my)
knitr::opts_chunk$set(eval = FALSE,
echo = TRUE,
fig.width = 7,
warning = FALSE,
message = FALSE)
## (i) specifying the sample size
no <- 1000
## (ii) defining the type of marginal distribution and its parameters
marginaldist <- "ggamma"
param <- list(scale = 1, shape1 = .8, shape2 = .8)
## (iii) defining the desired autocorrelation
acf.my <- c(1, 0.8)
## (iv) simulating
ggamma_sim <- generateTS(n = no, margdist = marginaldist, margarg = param, acsvalue = acf.my)
library(CoSMoS)
library(CoSMoS)
knitr::opts_chunk$set(eval = FALSE,
echo = TRUE,
fig.width = 7,
warning = FALSE,
message = FALSE)
library(CoSMoS)
knitr::opts_chunk$set(eval = FALSE,
echo = TRUE,
fig.width = 7,
warning = FALSE,
message = FALSE)
## (i) specifying the sample size
no <- 1000
## (ii) defining the type of marginal distribution and its parameters
marginaldist <- "ggamma"
param <- list(scale = 1, shape1 = .8, shape2 = .8)
## (iii) defining the desired autocorrelation
acf.my <- c(1, 0.8)
## (iv) simulating
ggamma_sim <- generateTS(n = no, margdist = marginaldist, margarg = param, acsvalue = acf.my)
## and (v) visually checking the generated time series
p <- quickTSPlot(ggamma_sim[[1]])
## (i) specifying the sample size
no <- 1000
## (ii) defining the type of marginal distribution and its parameters
marginaldist <- "ggamma"
param <- list(scale = 1, shape1 = .8, shape2 = .8)
## (iii) defining the desired autocorrelation
acf.my <- c(1, 0.8)
## (iv) simulating
ggamma_sim <- generateTS(n = no, margdist = marginaldist, margarg = param, acsvalue = acf.my)
## and (v) visually checking the generated time series
p <- quickTSPlot(ggamma_sim[[1]])
## (i) specifying the sample size
no <- 1000
## (ii) defining the type of marginal distribution and its parameters
marginaldist <- "ggamma"
param <- list(scale = 1, shape1 = .8, shape2 = .8)
## (iii) defining the desired autocorrelation
acf.my <- c(1, 0.8)
## (iv) simulating
ggamma_sim <- generateTS(n = no, margdist = marginaldist, margarg = param, acsvalue = acf.my)
## and (v) visually checking the generated time series
quickTSPlot(ggamma_sim[[1]])
acf <- c(1, 0.5, 0.5, 0.4, 0.4) #up to lag-4
ggamma_sim <- generateTS(n = no, margdist = marginaldist, margarg = param, acsvalue = acf)
quickTSPlot(ggamma_sim[[1]])
## specify lag
lags <- 0:10
## get the ACS
f <- acs(id = "fgn", t = lags, H = .75)
b <- acs(id = "burrXII", t = lags, scale = 1, shape1 = .6, shape2 = .4)
w <- acs(id = "weibull", t = lags, scale = 2, shape = 0.8)
p <- acs(id = "paretoII", t = lags, scale = 3, shape = 0.3)
## visualize the ACS
dta <- data.table(lags, f, b, w, p)
m.dta <- melt(data = dta, id.vars = "lags")
ggplot(data = m.dta, mapping = aes(x = lags, y = value, group = variable, colour = variable)) +
geom_point(size = 2.5) + geom_line(lwd = 1) +
scale_color_manual(values = c("steelblue4", "red4", "green4", "darkorange"),
labels = c("FGN", "Burr XII", "Weibull", "Pareto II"), name = "") +
labs(x = bquote(lag ~ tau), y = "Acf") + scale_x_continuous(breaks = lags) + theme_light()
knitr::opts_chunk$set(eval = TRUE,
echo = TRUE,
fig.width = 7,
warning = FALSE,
message = FALSE)
unlink('vignettes/vignette_cache', recursive = TRUE)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
knitr::opts_chunk$set(eval = TRUE,
echo = TRUE,
fig.width = 7,
warning = FALSE,
message = FALSE)
library(CoSMoS)
acf <- c(1, 0.6, 0.5, 0.4, 0.3) #up to lag-4
ggamma_sim <- generateTS(n = no, margdist = marginaldist, margarg = param, acsvalue = acf)
quickTSPlot(ggamma_sim[[1]])
## specify lag
lags <- 0:10
## get the ACS
f <- acs(id = "fgn", t = lags, H = .75)
b <- acs(id = "burrXII", t = lags, scale = 1, shape1 = .6, shape2 = .4)
w <- acs(id = "weibull", t = lags, scale = 2, shape = 0.8)
p <- acs(id = "paretoII", t = lags, scale = 3, shape = 0.3)
## visualize the ACS
dta <- data.table(lags, f, b, w, p)
m.dta <- melt(data = dta, id.vars = "lags")
ggplot(data = m.dta, mapping = aes(x = lags, y = value, group = variable, colour = variable)) +
geom_point(size = 2.5) + geom_line(lwd = 1) +
scale_color_manual(values = c("steelblue4", "red4", "green4", "darkorange"),
labels = c("FGN", "Burr XII", "Weibull", "Pareto II"), name = "") +
labs(x = bquote(lag ~ tau), y = "ACS") + scale_x_continuous(breaks = lags) + theme_light()
## set a sequence of hypothetical coordinates
d <- 5
coord <- cbind(runif(d)*30, runif(d)*30)
## compute VAR model parameters
fit <- fitVAR(spacepoints = coord,
p = 4,
margdist ="burrXII",
margarg = list(scale = 3, shape1 = .9, shape2 = .2),
p0 = 0.8,
stcsid = "clayton",
stcsarg = list(scfid = "weibull", tcfid = "weibull", copulaarg = 2,
scfarg = list(scale = 25, shape = 0.7),
tcfarg = list(scale = 3.1, shape = 0.8) ) )
## generate correlated timeseries
sim <- generateMTS(n = 500, STmodel = fit)
## visualize simulated timeseries
dta <- melt(data = data.table(time = 1:nrow(sim), sim[,1:d]), id.vars = "time")
ggplot(data = dta, mapping = aes(x = time, y = value)) + geom_line() +
facet_grid(facets = variable ~ ., scales = "free_y") + theme_light()
acf <- c(1, 0.6, 0.5, 0.4, 0.3) #up to lag-4
ggamma_sim <- generateTS(n = no, margdist = marginaldist, margarg = param, acsvalue = acf)
quickTSPlot(ggamma_sim[[1]])
library(CoSMoS)
devtools::build_vignettes()
install.packages("mass")
install.packages("MASS")
devtools::build_vignettes()
knitr::opts_chunk$set(eval = TRUE,
echo = TRUE,
fig.width = 7,
warning = FALSE,
message = FALSE)
library(CoSMoS)
data("precip")
quickTSPlot(precip$value, xlimdf = c(0, 10))
```{r}
data("precip")
precip$value
library(CoSMoS)
knitr::opts_chunk$set(eval = TRUE,
echo = TRUE,
fig.width = 7,
warning = FALSE,
message = FALSE)
library(CoSMoS)
data("precip")
quickTSPlot(precip$value, xlimdf = c(0, 10))
data("precip")
quickTSPlot(precip$value)
devtools::build_vignettes()
devtools::build_vignettes()
library(CoSMoS)
devtools::build_vignettes()
library(CoSMoS)
devtools::build_vignettes()
library(CoSMoS)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
