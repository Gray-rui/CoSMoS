coord <- cbind(runif(d)*30, runif(d)*30)
## fit and generate correlated timeseries
sim <- generateMTSFast(n = 500,
spacepoints = coord,
p0 = 0.7,
margdist ="burrXII",
margarg = list(scale = 3, shape1 = .9, shape2 = .2),
stcsarg = list(scfid = "weibull", tcfid = "weibull",
scfarg = list(scale = 25, shape = 0.7),
tcfarg = list(scale = 3.1, shape = 0.8)) )
## visualize simulated timeseries
dta <- melt(data = data.table(time = 1:nrow(sim), sim[,1:d]), id.vars = "time")
ggplot(data = dta, mapping = aes(x = time, y = value)) + geom_line() +
facet_grid(facets = variable ~ ., scales = "free_y") + theme_light()
## CPU time: ~75s
precip_ggamma <- analyzeTS(TS = precip, season = "month", dist = "ggamma",
acsID = "weibull", lag.max = 12)
reportTS(aTS = precip_ggamma, method = "dist")
reportTS(aTS = precip_ggamma, method = "acs") + theme_light()
reportTS(aTS = precip_ggamma, method = "stat")
precip_pareto <- analyzeTS(TS = precip, season = "month", dist = "paretoII", acsID = "fgn", lag.max = 12)
reportTS(aTS = precip_pareto, method = "dist")
reportTS(aTS = precip_pareto, method = "acs") + theme_light()
sim_precip <- simulateTS(aTS = precip_ggamma, from = as.POSIXct(x = "1978-12-01 00:00:00"),
to = as.POSIXct(x = "2008-12-01 00:00:00"))
dta <- precip
dta[, id := "observed"]
sim_precip[, id := "simulated"]
dta <- rbind(dta, sim_precip)
ggplot(data = dta) + geom_line(mapping = aes(x = date, y = value)) + facet_wrap(facets = ~id, ncol = 1) + theme_light()
## CPU time: ~240s
data("disch")
str <- analyzeTS(TS = disch, dist = "lnorm", norm = "N2", acsID = "paretoII",
lag.max = 20, constrain = TRUE, season = "month")
reportTS(aTS = str) + theme_light()
reportTS(aTS = str, method = "stat")
sim_str <- simulateTS(aTS = str)
dta <- disch
dta[, id := "observed"]
sim_str[, id := "simulated"]
dta <- rbind(dta, sim_str)
ggplot(data = dta) + geom_line(mapping = aes(x = date, y = value)) + facet_wrap(facets = ~id, ncol = 1) + theme_light()
## (i) specifying the sample size
no <- 1000
## (ii) defining the type of marginal distribution and its parameters
marginaldist <- "ggamma"
param <- list(scale = 1, shape1 = .8, shape2 = .8)
## (iii) defining the desired autocorrelation
acf.my <- c(1, 0.8)
## (iv) simulating
ggamma_sim <- generateTS(n = no, margdist = marginaldist, margarg = param, acsvalue = acf.my)
## and (v) visually checking the generated time series
quickTSPlot(ggamma_sim[[1]]) + theme_light()
prob_zero <- .9
## the argument `TSn = 5` enables the simulation of 5 timeseries.
ggamma_sim <- generateTS(n = no, margdist = marginaldist, margarg = param, acsvalue = acf,
p0 = prob_zero, TSn = 5)
plot(x = ggamma_sim, main = "") + theme_light()
## (i) specifying the sample size
no <- 1000
## (ii) defining the type of marginal distribution and its parameters
marginaldist <- "ggamma"
param <- list(scale = 1, shape1 = .8, shape2 = .8)
## (iii) defining the desired autocorrelation
acf.my <- c(1, 0.8)
## (iv) simulating
ggamma_sim <- generateTS(n = no, margdist = marginaldist, margarg = param, acsvalue = acf.my)
## and (v) visually checking the generated time series
p <- quickTSPlot(ggamma_sim[[1]])
View(p)
p$theme
p2 <- p
p2$theme <- theme_light()
p2
reportTS(precip_ggamma)
## CPU time: ~75s
precip_ggamma <- analyzeTS(TS = precip, season = "month", dist = "ggamma",
acsID = "weibull", lag.max = 12)
reportTS(aTS = precip_ggamma, method = "dist") + theme_light()
reportTS(aTS = precip_ggamma, method = "acs") + theme_light()
reportTS(aTS = precip_ggamma, method = "stat")
reportTS(aTS = precip_ggamma, method = "dist") + theme_light()
reportTS(aTS = precip_ggamma, method = "acs") + theme_light()
## CPU time: ~75s
precip_ggamma <- analyzeTS(TS = precip, season = "month", dist = "ggamma",
acsID = "weibull", lag.max = 12)
reportTS(aTS = precip_ggamma, method = "dist") + theme_light()
reportTS(aTS = precip_ggamma, method = "acs") + theme_light()
reportTS(aTS = precip_ggamma, method = "stat")
reportTS(aTS = precip_ggamma, method = "dist") + theme_light()
reportTS(aTS = precip_ggamma, method = "acs") + theme_light()
reportTS(aTS = precip_ggamma, method = "stat")
reportTS(aTS = precip_pareto, method = "dist")+ theme_light()
reportTS(aTS = precip_pareto, method = "acs") + theme_light()
View(precip_ggamma)
View(precip_ggamma)
## CPU time: ~240s
data("disch")
str <- analyzeTS(TS = disch, dist = "lnorm", norm = "N2", acsID = "paretoII",
lag.max = 20, constrain = TRUE, season = "month")
reportTS(aTS = str) + theme_light()
reportTS(aTS = str, method = "stat")
sim_str <- simulateTS(aTS = str)
dta <- disch
dta[, id := "observed"]
sim_str[, id := "simulated"]
dta <- rbind(dta, sim_str)
ggplot(data = dta) + geom_line(mapping = aes(x = date, y = value)) + facet_wrap(facets = ~id, ncol = 1) + theme_light()
library(CoSMoS)
devtools::build_vignettes()
R CMD build
install.packages("~/data/projects/CoSMoS_2.0.0.tar.gz", repos = NULL, type = "source")
knitr::opts_chunk$set(eval = FALSE,
echo = TRUE,
fig.width = 7,
warning = FALSE,
message = FALSE)
## (i) specifying the sample size
no <- 1000
## (ii) defining the type of marginal distribution and its parameters
marginaldist <- "ggamma"
param <- list(scale = 1, shape1 = .8, shape2 = .8)
## (iii) defining the desired autocorrelation
acf.my <- c(1, 0.8)
## (iv) simulating
ggamma_sim <- generateTS(n = no, margdist = marginaldist, margarg = param, acsvalue = acf.my)
knitr::opts_chunk$set(eval = FALSE,
echo = TRUE,
fig.width = 7,
warning = FALSE,
message = FALSE)
## (i) specifying the sample size
no <- 1000
## (ii) defining the type of marginal distribution and its parameters
marginaldist <- "ggamma"
param <- list(scale = 1, shape1 = .8, shape2 = .8)
## (iii) defining the desired autocorrelation
acf.my <- c(1, 0.8)
## (iv) simulating
ggamma_sim <- generateTS(n = no, margdist = marginaldist, margarg = param, acsvalue = acf.my)
library(CoSMoS)
library(CoSMoS)
knitr::opts_chunk$set(eval = FALSE,
echo = TRUE,
fig.width = 7,
warning = FALSE,
message = FALSE)
library(CoSMoS)
knitr::opts_chunk$set(eval = FALSE,
echo = TRUE,
fig.width = 7,
warning = FALSE,
message = FALSE)
## (i) specifying the sample size
no <- 1000
## (ii) defining the type of marginal distribution and its parameters
marginaldist <- "ggamma"
param <- list(scale = 1, shape1 = .8, shape2 = .8)
## (iii) defining the desired autocorrelation
acf.my <- c(1, 0.8)
## (iv) simulating
ggamma_sim <- generateTS(n = no, margdist = marginaldist, margarg = param, acsvalue = acf.my)
## and (v) visually checking the generated time series
p <- quickTSPlot(ggamma_sim[[1]])
## (i) specifying the sample size
no <- 1000
## (ii) defining the type of marginal distribution and its parameters
marginaldist <- "ggamma"
param <- list(scale = 1, shape1 = .8, shape2 = .8)
## (iii) defining the desired autocorrelation
acf.my <- c(1, 0.8)
## (iv) simulating
ggamma_sim <- generateTS(n = no, margdist = marginaldist, margarg = param, acsvalue = acf.my)
## and (v) visually checking the generated time series
p <- quickTSPlot(ggamma_sim[[1]])
## (i) specifying the sample size
no <- 1000
## (ii) defining the type of marginal distribution and its parameters
marginaldist <- "ggamma"
param <- list(scale = 1, shape1 = .8, shape2 = .8)
## (iii) defining the desired autocorrelation
acf.my <- c(1, 0.8)
## (iv) simulating
ggamma_sim <- generateTS(n = no, margdist = marginaldist, margarg = param, acsvalue = acf.my)
## and (v) visually checking the generated time series
quickTSPlot(ggamma_sim[[1]])
acf <- c(1, 0.5, 0.5, 0.4, 0.4) #up to lag-4
ggamma_sim <- generateTS(n = no, margdist = marginaldist, margarg = param, acsvalue = acf)
quickTSPlot(ggamma_sim[[1]])
## specify lag
lags <- 0:10
## get the ACS
f <- acs(id = "fgn", t = lags, H = .75)
b <- acs(id = "burrXII", t = lags, scale = 1, shape1 = .6, shape2 = .4)
w <- acs(id = "weibull", t = lags, scale = 2, shape = 0.8)
p <- acs(id = "paretoII", t = lags, scale = 3, shape = 0.3)
## visualize the ACS
dta <- data.table(lags, f, b, w, p)
m.dta <- melt(data = dta, id.vars = "lags")
ggplot(data = m.dta, mapping = aes(x = lags, y = value, group = variable, colour = variable)) +
geom_point(size = 2.5) + geom_line(lwd = 1) +
scale_color_manual(values = c("steelblue4", "red4", "green4", "darkorange"),
labels = c("FGN", "Burr XII", "Weibull", "Pareto II"), name = "") +
labs(x = bquote(lag ~ tau), y = "Acf") + scale_x_continuous(breaks = lags) + theme_light()
knitr::opts_chunk$set(eval = TRUE,
echo = TRUE,
fig.width = 7,
warning = FALSE,
message = FALSE)
unlink('vignettes/vignette_cache', recursive = TRUE)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
knitr::opts_chunk$set(eval = TRUE,
echo = TRUE,
fig.width = 7,
warning = FALSE,
message = FALSE)
library(CoSMoS)
acf <- c(1, 0.6, 0.5, 0.4, 0.3) #up to lag-4
ggamma_sim <- generateTS(n = no, margdist = marginaldist, margarg = param, acsvalue = acf)
quickTSPlot(ggamma_sim[[1]])
## specify lag
lags <- 0:10
## get the ACS
f <- acs(id = "fgn", t = lags, H = .75)
b <- acs(id = "burrXII", t = lags, scale = 1, shape1 = .6, shape2 = .4)
w <- acs(id = "weibull", t = lags, scale = 2, shape = 0.8)
p <- acs(id = "paretoII", t = lags, scale = 3, shape = 0.3)
## visualize the ACS
dta <- data.table(lags, f, b, w, p)
m.dta <- melt(data = dta, id.vars = "lags")
ggplot(data = m.dta, mapping = aes(x = lags, y = value, group = variable, colour = variable)) +
geom_point(size = 2.5) + geom_line(lwd = 1) +
scale_color_manual(values = c("steelblue4", "red4", "green4", "darkorange"),
labels = c("FGN", "Burr XII", "Weibull", "Pareto II"), name = "") +
labs(x = bquote(lag ~ tau), y = "ACS") + scale_x_continuous(breaks = lags) + theme_light()
## set a sequence of hypothetical coordinates
d <- 5
coord <- cbind(runif(d)*30, runif(d)*30)
## compute VAR model parameters
fit <- fitVAR(spacepoints = coord,
p = 4,
margdist ="burrXII",
margarg = list(scale = 3, shape1 = .9, shape2 = .2),
p0 = 0.8,
stcsid = "clayton",
stcsarg = list(scfid = "weibull", tcfid = "weibull", copulaarg = 2,
scfarg = list(scale = 25, shape = 0.7),
tcfarg = list(scale = 3.1, shape = 0.8) ) )
## generate correlated timeseries
sim <- generateMTS(n = 500, STmodel = fit)
## visualize simulated timeseries
dta <- melt(data = data.table(time = 1:nrow(sim), sim[,1:d]), id.vars = "time")
ggplot(data = dta, mapping = aes(x = time, y = value)) + geom_line() +
facet_grid(facets = variable ~ ., scales = "free_y") + theme_light()
acf <- c(1, 0.6, 0.5, 0.4, 0.3) #up to lag-4
ggamma_sim <- generateTS(n = no, margdist = marginaldist, margarg = param, acsvalue = acf)
quickTSPlot(ggamma_sim[[1]])
library(CoSMoS)
devtools::build_vignettes()
install.packages("mass")
install.packages("MASS")
devtools::build_vignettes()
knitr::opts_chunk$set(eval = TRUE,
echo = TRUE,
fig.width = 7,
warning = FALSE,
message = FALSE)
library(CoSMoS)
data("precip")
quickTSPlot(precip$value, xlimdf = c(0, 10))
```{r}
data("precip")
precip$value
library(CoSMoS)
knitr::opts_chunk$set(eval = TRUE,
echo = TRUE,
fig.width = 7,
warning = FALSE,
message = FALSE)
library(CoSMoS)
data("precip")
quickTSPlot(precip$value, xlimdf = c(0, 10))
data("precip")
quickTSPlot(precip$value)
devtools::build_vignettes()
devtools::build_vignettes()
library(CoSMoS)
devtools::build_vignettes()
library(CoSMoS)
devtools::build_vignettes()
library(CoSMoS)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
setwd("~/data/projects")
remove.packages("CoSMoS", lib="~/R/x86_64-pc-linux-gnu-library/4.0")
## copy-paste to get the latest version of CoSMoS
if (!require('devtools')) {install.packages('devtools'); library(devtools)}
install_github('TycheLab/CoSMoS', upgrade = 'never')
library(CoSMoS)
?`CoSMoS-package`
library(CoSMoS)
install_github('TycheLab/CoSMoS', upgrade = 'never', build_opts = c("--no-resave-data", "--no-manual")
)
if (!require('devtools')) {install.packages('devtools'); library(devtools)}
install_github('TycheLab/CoSMoS', upgrade = 'never', build_opts = c("--no-resave-data", "--no-manual"))
install_github('TycheLab/CoSMoS', upgrade = 'never', build_opts = c("--no-resave-data", "--no-manual"), force = TRUE)
remove.packages("CoSMoS", lib="~/R/x86_64-pc-linux-gnu-library/4.0")
setwd("~/")
setwd("~/")
library(CoSMoS)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
?data.table
install.packages(c("data.table", "nloptr", "MBA", "mAr", "matrixcalc"))
install.packages(c("mvtnorm", "plotly", "cowplot", "directlabels", "animation", "pracma"))
install.packages("animation")
library(CoSMoS)
devtools::load_all(".")
devtools::load_all(".")
x <- data.frame(date = seq(Sys.Date(), by = 'day', length.out = 1000),
#'                 value = rnorm(1000))
))
x <- data.frame(date = seq(Sys.Date(), by = 'day', length.out = 1000),
value = rnorm(1000))
x
m <- stratifySeasonData(x, 'month')
View(m)
m
View(m)
m[[1]]
library(CoSMoS)
m <- stratifySeasonData(x, 'month')
m
x
m[[4]]
m
season
simulateTS
?setkey
data('precip')
a <- analyzeTS(precip)
a
reportTS(a, 'dist')
reportTS(a, 'acs')
View(x)
b <- analyzeTS(x)
reportTS(b, 'dist')
View(b)
b[[1]]
b[[1]][[2]]
b$data[[1]]
b$data[[2]][[1]]
View(b)
View(x)
b$data[[2]]
View(x)
attr(x)
?attr
?attr(a, "dist")
attr(a, "dist")
attr(a, "date")
y <- attr(a, "date")
View(y)
date <- attr(a, 'date')
from <- date[1, date]
date[1, date]
View(date)
d2 <- data.table(attr(aTS, 'date'))
d2 <- data.table(attr(a, 'date'))
View(d2)
x2 <- a$data
View(x2)
from <- d2[1, d2]
from <- d2[1, date]
to <- date[.N, date]
.N
date <- attr(a, 'date')
View(date)
attributes(date)
?attr
date <- attr(x, 'date')
y <- simulateTS(x)
<- simulateTS(a)
ts <- simulateTS(a)
ts <- simulateTS(a)
date <- attr(x, 'date')
date <- attr(ts, 'date')
date <- attr(a, 'date')
View(date)
ts <- simulateTS(a)
date <- attr(a, 'date')
class(date)
class(a)
View(a)
View(a)
View(precip)
sumamry(precip)
summary(precip)
a <- analyzeTS(precip)
date <- attr(a, 'date')
class(date)
View(precip)
x <- generateTS(margdist = 'ggamma',
margarg = list(scale = 1,
shape1 = .8,
shape2 = .8),
acsvalue = acs(id = 'paretoII',
t = 0:30,
scale = 1,
shape = .75),
n = 1000,
p = 30,
TSn = 3)
devtools::load_all(".")
x <- generateTS(margdist = 'ggamma',
margarg = list(scale = 1,
shape1 = .8,
shape2 = .8),
acsvalue = acs(id = 'paretoII',
t = 0:30,
scale = 1,
shape = .75),
n = 1000,
p = 30,
TSn = 3)
View(x)
View(x)
library(CoSMoS)
devtools::load_all(".")
library(CoSMoS)
data('precip')
a <- analyzeTS(precip)
vt_precip <- read.csv("/home/kevin/Downloads/samms_analysis/samms_analysis/samms_raw/Precipitation_VT.csv", header = TRUE)
vt_precip <- vt_precip[, c(2, 5)]
View(vt_precip)
names(vt_precip)[2] <- "value"
vt <- vt_precip
vt$date <- as.Date(vt$date, format = "%Y-%m-%d")
a_vt <- analyzeTS(vt)
vt_date <- attr(a_vt, 'date')
names(a)
names(a_vt)
?attr
date <- attr(a, 'date')
View(vt_precip)
vt2 <- vt_precip
vt2$date <- paste(vt2$date, "00:00:00")
vt2$date <- as.POSIXct(vt2$date, format = "%Y-%m-%d %H:%M:%S", tz = "Etc/GMT+6")
View(vt2)
View(precip)
?precip
library(CRHMr)
CRHM <- readObsFile("/home/kevin/data/projects/crhm/current_version/program files/CRHM/Examples/SmithCreek_Ppt_1993-2005.obs", timezone = "Etc/GMT+7")
CRHM <- CRHM[, c(1, 3)]
names(CRHM) <- c("date", "value")
a_CRHM <- analyzeTS(CRHM)
CRHM_date <- attr(a_CRHM, 'date')
View(precip)
View(precip)
names(precip)
typeof(precip)
v3 <- as.list(v2)
vt3 <- as.list(vt2)
a3 <- analyzeTS(vt3)
View(vt3)
View(precip)
View(precip)
library(CoSMoS)
library(CoSMoS)
library(CoSMoS)
source('~/data/projects/CoSMoS_dev_Francesco/R/analyzeTS.R')
source('~/data/projects/CoSMoS_dev_Francesco/R/analyzeTS.R')
library(CoSMoS)
library(CoSMoS)
source('~/data/projects/CoSMoS_dev_Francesco/R/analyzeTS.R')
install.packages("ggquiver")
library(CoSMoS)
build_vignettes()
R CMD build
library(CoSMoS)
tools::buildVignettes()
setwd("~/data/projects")
setwd("~/data/projects")
tools::buildVignettes("CoSMoS")
buildVignettes("CoSMoS")
tools::buildVignettes("CoSMoS")
install.packages(c("nloptr", "MBA", "mAr", "matrixcalc", "mvtnorm", "plotly", "cowplot", "directlabels"))
install.packages(c("animation", "ggquiver", "pracma"))
install.packages("amination")
install.packages("magick")
install.packages("amination")
install.packages("animation")
library(CoSMoS)
library(CoSMoS)
install.packages("testthat")
library(tidyselect)
detach("package:tidyselect", unload = TRUE)
library(testthat)
library(CoSMoS)
library(CoSMoS)
install.packages("pandocfilters")
